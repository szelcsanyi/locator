<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Hive\Locator\Instance" namespace="Hive\Locator" name="Instance" abstract="false" final="false" start="18" end="91">
  <file path="/usr/local/zend/var/apps/http/vendor.dev/vendor/hive/locator/build/../source" file="Instance.php" realpath="/usr/local/zend/var/apps/http/vendor.dev/vendor/hive/locator/source/Instance.php" size="2148" time="2019-04-15T16:27:20+11:00" unixtime="1555306040" sha1="9dbee74097a8fe63130fa88b0c598bb12b582586" relative="Instance.php"/>
  <docblock>
    <description compact="Locator Instance.">Allows access to the Locator through itself, and the ability to save an instance, for later use.</description>
    <todo value="This isn't an instance, its something else altogether."/>
    <author value="Jamie Peake &lt;jamie.peake@gmail.com&gt;"/>
    <licence value="https://github.com/hive/locator/blob/master/LICENSE (BSD-3-Clause)"/>
    <package value="Hive"/>
    <subpackage value="Locator"/>
    <copyright value="(c) 2017 Jamie Peake"/>
  </docblock>
  <extends full="Hive\Locator\Object" namespace="Hive\Locator" name="Object"/>
  <implements full="Hive\Locator\Contract\Instance" namespace="Hive\Locator\Contract" name="Instance"/>
  <member name="objects" visibility="private" static="true" line="20"/>
  <constructor name="__construct" start="23" end="34" abstract="false" final="false" static="false" visibility="public">
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="map" byreference="false" type="array"/>
    <parameter name="config" byreference="false" type="array" default=""/>
  </constructor>
  <method name="init" start="45" end="55" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Old Fashioned way to access the object."/>
      <param variable="$name"/>
      <return type="mixed"/>
      <throws type="object">
        <type full="Hive\Locator\Exception\InstanceDoesNotExist" namespace="Hive\Locator\Exception" name="InstanceDoesNotExist"/>
      </throws>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="construct" start="66" end="77" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Shortcut Method, for creating, parsing and saving the object in one call."/>
      <param variable="$name"/>
      <param variable="$subject"/>
      <param type="array" variable="$data"/>
      <param type="array" variable="$config"/>
      <throws type="object">
        <type full="Hive\Locator\Exception\InstanceExists" namespace="Hive\Locator\Exception" name="InstanceExists"/>
      </throws>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="subject" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="array"/>
    <parameter name="config" byreference="false" type="array" default=""/>
  </method>
  <method name="__callStatic" start="87" end="90" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get access to an object through a static call."/>
      <param variable="$name"/>
      <param variable="$params"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="params" byreference="false" type="{unknown}"/>
  </method>
  <parent full="Hive\Locator\Object" namespace="Hive\Locator" name="Object">
    <extends full="Hive\Locator\Library" namespace="Hive\Locator" name="Library"/>
    <implements full="Hive\Locator\Contract\Object" namespace="Hive\Locator\Contract" name="Object"/>
    <member name="config" default="" type="array" visibility="protected" static="false" line="31">
      <docblock>
        <description compact="Default configuration settings."/>
        <var description="config default object configuration for the library." type="array"/>
        <var description="['legend'] : array : Legend used to create the map, ie. what to call each of the array keys (in order)" type="array"/>
        <var description="['aliases'] : array : Alias to the legend as methods $environment-&gt;in('staging'); $environment-&gt;is('domain.com.au');" type="array"/>
        <var description="['driver'] : string|object : The driver which will compare our value to see if it is a match" type="array"/>
        <var description="['current'] : array : Allow access to the current result from these names;" type="array"/>
        <var description="['access'] : array : Whether to allow access to the result through method calls, property calls or a 'current'." type="array"/>
        <var description="['current'] : array : Any names which to allow access to the current result." type="array"/>
      </docblock>
    </member>
    <constructor name="__construct" start="48" end="55" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Object constructor.">Merge the object config with the libraries</description>
        <param type="array" variable="$map"/>
        <param type="array" variable="$config"/>
      </docblock>
      <parameter name="map" byreference="false" type="array"/>
      <parameter name="config" byreference="false" type="array" default=""/>
      <inline>
        <comment value="Merge the received config with the defaults" line="51"/>
      </inline>
    </constructor>
    <method name="__get" start="68" end="81" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Will allow access to the result through properties.">Allows access to the result, through property calls on the object,
depending on config, it can allow access via the legend, current or alias.</description>
        <param variable="$name"/>
        <return type="object">
          <type full="Hive\Locator\bool|object" namespace="Hive\Locator" name="bool|object"/>
        </return>
        <throws type="object">
          <type full="Hive\Locator\Exception\UndefinedProperty" namespace="Hive\Locator\Exception" name="UndefinedProperty"/>
        </throws>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="If magic properties are turned on" line="70"/>
        <comment value="Throw a Bad Method call as the method wasn't found." line="79"/>
      </inline>
    </method>
    <method name="__call" start="99" end="120" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Will allow access to the result through a method call.">Allows access to the result through a method call on the object, depending on the config.
It can allow access via the legend, current or alias. To enable, ensure that 'method is with in Config['access'].

If an argument is sent to, it will compare the argument with the result and return a true/false boolean.</description>
        <param variable="$name"/>
        <param variable="$arguments"/>
        <return type="object">
          <type full="Hive\Locator\bool|object" namespace="Hive\Locator" name="bool|object"/>
        </return>
        <throws type="object">
          <type full="Hive\Locator\Exception\BadMethodCall" namespace="Hive\Locator\Exception" name="BadMethodCall"/>
        </throws>
        <throws type="object">
          <type full="Hive\Locator\Exception\UnresolvedLegend" namespace="Hive\Locator\Exception" name="UnresolvedLegend"/>
        </throws>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="If magic methods are turned on" line="102"/>
        <comment value="Throw a Bad Method call as the method wasn't found." line="118"/>
      </inline>
    </method>
    <method name="get" start="175" end="222" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Will get the value of items other then the current.">Does a fuzzy search, based upon the parameters, any which are sent in as config['current'] it will use the current result.</description>
        <return type="object">
          <type full="\stdClass" namespace="" name="stdClass"/>
        </return>
        <throws type="object">
          <type full="Hive\Locator\Exception\UndefinedMapping" namespace="Hive\Locator\Exception" name="UndefinedMapping"/>
        </throws>
        <throws type="object">
          <type full="Hive\Locator\Exception\UnresolvedLegend" namespace="Hive\Locator\Exception" name="UnresolvedLegend"/>
        </throws>
      </docblock>
      <inline>
        <comment value="Make sure we have a result" line="177"/>
      </inline>
    </method>
  </parent>
  <parent full="Hive\Locator\Library" namespace="Hive\Locator" name="Library">
    <implements full="Hive\Locator\Contract\Library" namespace="Hive\Locator\Contract" name="Library"/>
    <constant type="{unknown}" name="DRIVER_CONTRACT" value="'Hive\Locator\Contract\Driver'">
    <docblock>
      <description compact="Contract which a driver must implement. (Magic Value)"/>
    </docblock>
  </constant>
    <member name="map" type="array" default="" visibility="public" static="false" line="33">
    <docblock>
      <description compact="The array or 'map' upon which to parse"/>
      <var description="Must be an associative array" type="array"/>
    </docblock>
  </member>
    <member name="status" type="boolean" default="false" visibility="public" static="false" line="50">
    <docblock>
      <description compact="Status of whether or not we have found a result"/>
      <var type="object">
        <type full="Hive\Locator\bool" namespace="Hive\Locator" name="bool"/>
      </var>
    </docblock>
  </member>
    <member name="result" type="array" default="" visibility="public" static="false" line="57">
    <docblock>
      <description compact="The result of the map/legend, used while we build it up."/>
      <var type="array"/>
    </docblock>
  </member>
    <member name="driver" type="boolean" default="false" visibility="protected" static="false" line="63">
    <docblock>
      <description compact="Comparison driver object"/>
      <var type="object">
        <type full="Hive\Locator\bool|object" namespace="Hive\Locator" name="bool|object"/>
      </var>
    </docblock>
  </member>
    <constructor name="__construct" start="79" end="98" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Let the magic begin, assign our map and set our configuration"/>
      <throws type="object">
        <type full="Hive\Locator\Exception\InvalidDriver" namespace="Hive\Locator\Exception" name="InvalidDriver"/>
      </throws>
      <param description="The actual environment mapping" type="array" variable="$map"/>
      <param description="Configuration settings for this class" type="array" variable="$config"/>
    </docblock>
    <parameter name="map" byreference="false" type="array"/>
    <parameter name="config" byreference="false" type="array" default=""/>
    <inline>
      <comment value="Map needs to be defined on creation." line="81"/>
      <comment value="Merge the received config with the defaults" line="84"/>
      <comment value="Create the driver object if it hasn't been created already" line="87"/>
      <comment value="Gigo Check that the driver implements the driver interface" line="93"/>
    </inline>
  </constructor>
    <method name="resolve" start="107" end="126" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Takes a subject and resolves it against the legend, returns the map information as a result"/>
      <param description="the subject to search the map for and assign the result" type="mixed" variable="$subject"/>
      <return description="of the result, with correct map assigned or false if it doesn't exist" type="object">
        <type full="\stdClass" namespace="" name="stdClass"/>
      </return>
    </docblock>
    <parameter name="subject" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Reset the status to false, as we are about the parse a new value" line="109"/>
      <comment value="Assign the subject to search for" line="112"/>
      <comment value="Parse the map" line="115"/>
    </inline>
  </method>
  </parent>
  <interface full="Hive\Locator\Contract\Library" namespace="Hive\Locator\Contract" name="Library">
    <method name="resolve" start="25" end="25" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Resolves a subject against the internal map, returning the legend for the object"/>
      <param variable="$subject"/>
      <return description="a object of the subjects legend values." type="object">
        <type full="\stdClass" namespace="" name="stdClass"/>
      </return>
    </docblock>
    <parameter name="subject" byreference="false" type="{unknown}"/>
  </method>
  </interface>
  <interface full="Hive\Locator\Contract\Object" namespace="Hive\Locator\Contract" name="Object">
    <extends full="Hive\Locator\Contract\Library" namespace="Hive\Locator\Contract" name="Library"/>
  </interface>
  <interface full="Hive\Locator\Contract\Instance" namespace="Hive\Locator\Contract" name="Instance"/>
</class>
